import { ShoppingCart, Plus, Minus, X, Check } from 'lucide-react';// Supabase client configurationimport { createClient } from '@supabase/supabase-js';// NOTE: Vite automatically exposes environment variables prefixed with VITE_const VITE_SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;const VITE_SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;const supabase = createClient(  VITE_SUPABASE_URL,  VITE_SUPABASE_ANON_KEY);// --- Image Configuration ---const SUPABASE_STORAGE_URL = `${VITE_SUPABASE_URL}/storage/v1/object/public/menu-images`;// Category configconst CATEGORIES = [  { id: 'grilled', icon: 'ü•©', label: 'Grilled' },  { id: 'bestsellers', icon: '‚≠ê', label: 'Best Sellers' },  { id: 'seafood', icon: 'üêü', label: 'Seafood' },  { id: 'noodles', icon: 'üçú', label: 'Noodles' },  { id: 'silog', icon: 'üç≥', label: 'Silog' },  { id: 'appetizers', icon: 'üçü', label: 'Appetizers' },  { id: 'soup', icon: 'üç≤', label: 'Soup' },  { id: 'lemonade', icon: 'üçã', label: 'Lemonade' },  { id: 'smoothies', icon: 'üçì', label: 'Smoothies' },  { id: 'coffee', icon: '‚òï', label: 'Coffee' },  { id: 'alcohol', icon: 'ü•É', label: 'Alcohol' },   { id: 'nonalcoholic', icon: 'üßÉ', label: 'Drinks' },  { id: 'buckets', icon: 'üçª', label: 'Buckets' },];// --- Checkout Modal Component ---const CheckoutModal = ({ total, orderType, tableNumber, onClose, onSubmitOrder }) => {    const [customerName, setCustomerName] = useState('');    const [paymentMethod, setPaymentMethod] = useState('Cash');    const [isSubmitting, setIsSubmitting] = useState(false);    const handleSubmit = async (e) => {        e.preventDefault();        if ((orderType === 'dine-in' && !tableNumber) || !customerName.trim()) {            alert('Please enter your name' + (orderType === 'dine-in' ? ' and table number' : ''));            return;        }        setIsSubmitting(true);        await onSubmitOrder({ customerName, paymentMethod });        setIsSubmitting(false);    };    return (        <div className="fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center p-4">            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md">                <div className="p-6">                    <div className="flex justify-between items-center mb-4 border-b pb-3">                        <h2 className="text-2xl font-bold text-gray-800">Confirm Order</h2>                        <button onClick={onClose} className="text-gray-400 hover:text-gray-600">                            <X className="w-6 h-6" />                        </button>                    </div>                    <div onSubmit={handleSubmit}>                        <div className="mb-4 bg-indigo-50 p-3 rounded-lg border border-indigo-200">                            <p className="text-lg font-semibold text-indigo-700">Type: {orderType === 'dine-in' ? `Dine In (Table: ${tableNumber})` : 'Takeout'}</p>                        </div>                        <div className="mb-4">                            <label htmlFor="customerName" className="block text-sm font-medium text-gray-700 mb-1">Your Name</label>                            <input                                id="customerName"                                type="text"                                value={customerName}                                onChange={(e) => setCustomerName(e.target.value)}                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-pink-500 focus:border-pink-500"                                placeholder="e.g., Jane Smith"                                required                            />                        </div>                        <div className="mb-6">                            <label className="block text-sm font-medium text-gray-700 mb-2">Payment Method</label>                            <div className="flex gap-4">                                <label className="flex items-center space-x-2 cursor-pointer">                                    <input
                                        type="radio"
                                        name="payment"
                                        value="Cash"
                                        checked={paymentMethod === 'Cash'}
                                        onChange={() => setPaymentMethod('Cash')}
                                        className="form-radio text-pink-600 h-5 w-5"
                                    />
                                    <span className="text-gray-700">Cash</span>
                                </label>
                                <label className="flex items-center space-x-2 cursor-pointer">
                                    <input
                                        type="radio"
                                        name="payment"
                                        value="Card"
                                        checked={paymentMethod === 'Card'}
                                        onChange={() => setPaymentMethod('Card')}
                                        className="form-radio text-pink-600 h-5 w-5"
                                    />
                                    <span className="text-gray-700">Card (Debit/Credit)</span>
                                </label>
                            </div>
                        </div>

                        <div className="flex justify-between items-center text-xl font-bold text-gray-900 border-t pt-3">
                            <span>Total:</span>
                            <span className="text-pink-600">‚Ç±{total.toFixed(2)}</span>
                        </div>
                        
                        <button
                            type="button"
                            onClick={handleSubmit}
                            className={`w-full mt-6 py-3 rounded-xl font-bold text-white transition-all flex items-center justify-center gap-2 
                                ${isSubmitting ? 'bg-gray-400' : 'bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700'}`}
                            disabled={isSubmitting}
                        >
                            {isSubmitting ? (
                                <span className="animate-spin h-5 w-5">‚è≥</span>
                            ) : (
                                <>
                                    <Check className="w-5 h-5" />
                                    Place Order (‚Ç±{total.toFixed(2)})
                                </>
                            )}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

// --- Main Menu Component ---
export default function Menu() {
  const [menuItems, setMenuItems] = useState([]);
  const [cart, setCart] = useState([]);
  const [activeCategory, setActiveCategory] = useState('grilled');
  const [loading, setLoading] = useState(true);
  const [showCart, setShowCart] = useState(false);
  const [showCheckoutModal, setShowCheckoutModal] = useState(false);
  const [orderConfirmed, setOrderConfirmed] = useState(false); 
  const [itemCount, setItemCount] = useState(0);
  
  const [orderType, setOrderType] = useState('takeout');
  const [tableNumber, setTableNumber] = useState('');

  useEffect(() => {
    loadMenuFromSupabase();
    const savedCart = localStorage.getItem('sipnsing_cart');
    if (savedCart) {
        setCart(JSON.parse(savedCart));
    }
  }, []);
  
  useEffect(() => {
    localStorage.setItem('sipnsing_cart', JSON.stringify(cart));
  }, [cart]);
  
  useEffect(() => {
    const handleScroll = () => {
      const sections = CATEGORIES.map(cat => ({
        id: cat.id,
        element: document.getElementById(cat.id)
      })).filter(s => s.element);

      const scrollPosition = window.scrollY + 200;

      for (let i = sections.length - 1; i >= 0; i--) {
        const section = sections[i];
        if (section.element.offsetTop <= scrollPosition) {
          setActiveCategory(section.id);
          break;
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  const loadMenuFromSupabase = async () => {
    try {
      let { data: items, error: itemsError } = await supabase
        .from('menu_items')
        .select(`*, options:menu_item_options (id, label, price, sort_order), special_notes`)
        .eq('available', true)
        .order('category', { ascending: true })
        .order('sort_order', { ascending: true })
        .order('code', { ascending: true });

      if (itemsError) throw itemsError;
      
      const structuredMenu = items || [];
      setMenuItems(structuredMenu);
      setItemCount(structuredMenu.length);
      
      localStorage.setItem('sipnsing_menu', JSON.stringify(structuredMenu));
      
    } catch (err) {
      console.error('Error loading menu from Supabase:', err.message);
      
      const cached = localStorage.getItem('sipnsing_menu');
      if (cached) {
        const cachedMenu = JSON.parse(cached);
        setMenuItems(cachedMenu);
        setItemCount(cachedMenu.length);
      } else {
        console.error("Failed to load menu. Check network connection or Supabase keys.");
      }
    } finally {
      setLoading(false);
    }
  };

  const addToCart = (item, option = null) => {
    const price = option?.price || item.base_price; 
    const cartItemId = `${item.id}-${option?.id || 'base'}`;
    
    const cartItem = {
      id: cartItemId,
      item_id: item.id,
      code: item.code,
      name: item.name,
      option_id: option?.id || null,
      option_label: option?.label || 'Regular',
      price: parseFloat(price),
      quantity: 1,
    };

    setCart(prev => {
      const existing = prev.find(i => i.id === cartItemId);
      if (existing) {
        return prev.map(i =>
          i.id === cartItemId
            ? { ...i, quantity: i.quantity + 1 }
            : i
        );
      }
      return [...prev, cartItem];
    });
  };

  const updateQuantity = (cartItemId, change) => {
    setCart(prev => {
      const updated = prev.map(item => {
        if (item.id === cartItemId) {
          const newQty = Math.max(0, item.quantity + change);
          return { ...item, quantity: newQty };
        }
        return item;
      }).filter(item => item.quantity > 0);
      return updated;
    });
  };

  const removeFromCart = (cartItemId) => {
    setCart(prev => prev.filter(item => item.id !== cartItemId));
  };

  const getCartTotal = () => {
    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const handlePlaceOrder = async ({ customerName, paymentMethod }) => {
    if (cart.length === 0) return;

    try {
        const orderData = {
            customer_name: customerName, 
            order_type: orderType,
            table_number: orderType === 'dine-in' ? tableNumber : null,
            items: cart.map(item => ({
                item_id: item.item_id,
                code: item.code,
                name: item.name,
                option: item.option_label,
                option_id: item.option_id,
                price: item.price,
                quantity: item.quantity,
            })),
            subtotal: getCartTotal(),
            tax: 0,
            total: getCartTotal(),
            status: 'pending',
            payment_method: paymentMethod.toLowerCase(), 
            payment_status: 'pending',
        };
        
        const { data, error } = await supabase
            .from('orders')
            .insert([orderData])
            .select('id') 
            .single();

        if (error) throw error;
        
        setCart([]);
        localStorage.removeItem('sipnsing_cart');
        setShowCheckoutModal(false);
        setOrderConfirmed(true);
        
    } catch (err) {
        console.error('Error placing order:', err);
        alert('Failed to place order: ' + err.message);
    }
  };

  const scrollToCategory = (categoryId) => {
    setActiveCategory(categoryId);
    const element = document.getElementById(categoryId);
    if (element) {
      const headerOffset = 150;
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
      window.scrollTo({ top: offsetPosition, behavior: 'smooth' });
    }
  };

  const groupItemsByCategory = () => {
    const grouped = {};
    
    menuItems.forEach(item => {
      if (!grouped[item.category]) {
        grouped[item.category] = {};
      }
      
      const placeholder = item.image_placeholder || item.code;
      if (!grouped[item.category][placeholder]) {
        grouped[item.category][placeholder] = [];
      }
      
      grouped[item.category][placeholder].push(item);
    });
    
    return grouped;
  };

  if (loading) {
    return (
      <div className="bg-white min-h-screen flex items-center justify-center">
        <div className="text-gray-800 text-xl">Loading menu...</div>
      </div>
    );
  }

  const renderMenuGroup = (items) => {
    const imageCode = (items[0].image_placeholder || items[0].code).toUpperCase();
    const webpUrl = `${SUPABASE_STORAGE_URL}/${imageCode}.webp`;
    const jpgUrl = `${SUPABASE_STORAGE_URL}/${imageCode}.jpg`;
    
    const aspect32Images = [
      'L1-L6', 'D1-D6', 'SM1-SM3', 'SM4-SM6', 'SM7-SM9', 'CF1-CF7',
      'AL1', 'WHISKEY', 'MIXED', 'NON-AL', 'BKT1', 'BKT2', 'BKT3', 'BKT4', 'BKT5',
      'BEERS', 'VODKA', 'RHUM', 'GIN'
    ];
    const aspect23Images = ['BKT'];
    
    const is32Aspect = aspect32Images.includes(imageCode);
    const is23Aspect = aspect23Images.includes(imageCode);
    
    let placeholderDimensions = '200x150';
    let aspectClass = 'aspect-[4/3]';
    
    if (is32Aspect) {
      placeholderDimensions = '300x200';
      aspectClass = 'aspect-[3/2]';
    } else if (is23Aspect) {
      placeholderDimensions = '200x300';
      aspectClass = 'aspect-[2/3]';
    }
    
    const placeholderUrl = `https://placehold.co/${placeholderDimensions}/5B21B6/D8B4FE?text=${imageCode}`;
    const isGrouped = items.length > 1;
    
    return (
      <div className="bg-white border-2 border-gray-200 rounded-xl overflow-hidden hover:border-purple-400 hover:shadow-lg transition-all">
        {/* Image */}
        <div className={`w-full ${aspectClass} bg-gray-100`}>
          <img
            src={webpUrl}
            alt={imageCode}
            className="w-full h-full object-cover"
            onError={(e) => {
              if (e.target.src.endsWith('.webp')) {
                e.target.src = jpgUrl;
              } else if (e.target.src.endsWith('.jpg')) {
                e.target.onerror = null;
                e.target.src = placeholderUrl;
              }
            }}
          />
        </div>

        {/* Items List */}
        <div className="p-4">
          {items.map((item, idx) => {
            const hasOptions = item.options && item.options.length > 0;
            
            return (
              <div key={item.id} className={`${idx > 0 ? 'mt-4 pt-4 border-t border-gray-200' : ''}`}>
                {/* Item Header - only show for grouped items or items with options */}
                {(isGrouped || hasOptions) && (
                  <div className="mb-2">
                    <span className="text-purple-600 font-bold text-sm mr-2">{item.code}</span>
                    <span className="text-gray-800 font-semibold">{item.name}</span>
                    {item.description && (
                      <p className="text-gray-600 text-sm mt-1">{item.description}</p>
                    )}
                    {item.special_notes && (
                      <p className="text-sm italic text-red-600 mt-1">{item.special_notes}</p>
                    )}
                  </div>
                )}

                {/* Single item without options and not grouped */}
                {!hasOptions && !isGrouped && (
                  <div className="flex justify-between items-center">
                    <div>
                      <span className="text-purple-600 font-bold text-sm mr-2">{item.code}</span>
                      <span className="text-gray-800 font-semibold">{item.name}</span>
                      {item.description && (
                        <p className="text-gray-600 text-sm mt-1">{item.description}</p>
                      )}
                      {item.special_notes && (
                        <p className="text-sm italic text-red-600 mt-1">{item.special_notes}</p>
                      )}
                      <p className="text-purple-700 font-bold text-xl mt-2">‚Ç±{item.base_price}</p>
                    </div>
                    <button
                      onClick={() => addToCart(item)}
                      className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg hover:scale-105 transition-all whitespace-nowrap ml-4"
                    >
                      Add to Cart
                    </button>
                  </div>
                )}

                {/* Options or grouped items with base price */}
                {(hasOptions || (isGrouped && !hasOptions)) && (
                  <div className="space-y-2">
                    {hasOptions ? (
                      item.options.map(option => (
                        <div key={option.id} className="flex justify-between items-center py-2">
                          <span className="text-gray-700">{option.label}</span>
                          <div className="flex items-center gap-3">
                            <span className="text-purple-700 font-bold">‚Ç±{option.price}</span>
                            <button
                              onClick={() => addToCart(item, option)}
                              className="bg-pink-500 text-white p-2 rounded-lg hover:bg-pink-600 transition-colors"
                            >
                              <Plus className='w-4 h-4' />
                            </button>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="flex justify-between items-center py-2">
                        <span className="text-gray-700">Regular</span>
                        <div className="flex items-center gap-3">
                          <span className="text-purple-700 font-bold">‚Ç±{item.base_price}</span>
                          <button
                            onClick={() => addToCart(item)}
                            className="bg-pink-500 text-white p-2 rounded-lg hover:bg-pink-600 transition-colors"
                          >
                            <Plus className='w-4 h-4' />
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  const groupedItems = groupItemsByCategory();
  
  return (
    <div className="bg-gray-50 min-h-screen text-gray-800">
      {/* Header */}
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 p-5 sticky top-0 z-40 shadow-lg">
        <div className="flex items-center justify-center gap-3 mb-1">
          <img 
            src={`${SUPABASE_STORAGE_URL}/logo.webp`}
            alt="Sip & Sing Logo" 
            className="h-10 w-10 object-contain"
            onError={(e) => {
              e.target.src = `${SUPABASE_STORAGE_URL}/logo.jpg`;
              e.target.onerror = () => e.target.style.display = 'none';
            }}
          />
          <h1 className="text-3xl font-bold text-white">Sip & Sing</h1>
        </div>
        <p className="text-purple-100 text-sm text-center">Delicious Food ‚Ä¢ Refreshing Drinks ‚Ä¢ Great Vibes</p>
        {tableNumber && orderType === 'dine-in' && (
          <p className="text-yellow-300 text-base mt-2 text-center">
            Ordering for Table {tableNumber}
          </p>
        )}
      </div>

      {/* Item Count Display */}
      {itemCount > 0 && (
          <div className="bg-white text-center py-2 sticky top-[88px] z-30 shadow-sm">
              <span className="text-gray-600 text-sm font-medium">
                  {itemCount} Items Available
              </span>
          </div>
      )}

      {/* Success Banner */}
      {orderConfirmed && (
        <div className="bg-green-600 p-3 text-center sticky top-[120px] z-30 flex justify-center items-center gap-3">
          <Check className="w-5 h-5 text-white" />
          <span className="font-semibold text-white">Order placed successfully! Staff notified.</span>
          <button onClick={() => setOrderConfirmed(false)} className="text-white opacity-70 hover:opacity-100 ml-auto">
            <X className="w-5 h-5" />
          </button>
        </div>
      )}

      {/* Category Nav */}
      <div className="sticky top-[120px] z-20 bg-white shadow-sm overflow-x-auto flex gap-2 p-3">
        {CATEGORIES.map(cat => (
          <button
            key={cat.id}
            onClick={() => scrollToCategory(cat.id)}
            className={`px-4 py-2 rounded-full whitespace-nowrap font-semibold transition-all ${
              activeCategory === cat.id
                ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-md'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            {cat.icon} {cat.label}
          </button>
        ))}
      </div>

      {/* Menu Items */}
      <div className="max-w-4xl mx-auto p-4 pb-24">
        {CATEGORIES.map(category => {
          const categoryGroups = groupedItems[category.id];
          if (!categoryGroups || Object.keys(categoryGroups).length === 0) return null;

          return (
            <div key={category.id} id={category.id} className="mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2">
                <span className="text-3xl">{category.icon}</span>
                {category.label.toUpperCase()}
              </h2>

              <div className="grid gap-4">
                {Object.values(categoryGroups).map((itemGroup, idx) => (
                  <div key={idx}>
                    {renderMenuGroup(itemGroup)}
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>

      {/* Cart Button */}
      <button
        onClick={() => setShowCart(true)}
        className="fixed bottom-6 right-6 bg-gradient-to-r from-pink-500 to-purple-500 text-white w-16 h-16 rounded-full shadow-2xl flex items-center justify-center hover:scale-110 transition-transform z-30"
      >
        <ShoppingCart className="w-6 h-6" />
        {cart.length > 0 && (
          <span className="absolute -top-2 -right-2 bg-red-500 text-white w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold">
            {cart.reduce((sum, item) => sum + item.quantity, 0)}
          </span>
        )}
      </button>

      {/* Cart Modal */}
      {showCart && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-40 flex items-end md:items-center justify-center">
          <div className="bg-white w-full md:max-w-2xl md:rounded-t-3xl md:rounded-b-3xl max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-gray-50 p-5 flex justify-between items-center border-b border-gray-200">
              <h2 className="text-2xl font-bold text-gray-800">Your Order</h2>
              <button onClick={() => setShowCart(false)} className="text-gray-600">
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="p-5 border-b border-gray-200">
              <div className="flex gap-2 mb-3">
                <button
                  onClick={() => setOrderType('dine-in')}
                  className={`flex-1 py-3 rounded-lg font-semibold ${
                    orderType === 'dine-in'
                      ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white'
                      : 'bg-gray-100 text-gray-700'
                  }`}
                >
                  Dine In
                </button>
                <button
                  onClick={() => setOrderType('takeout')}
                  className={`flex-1 py-3 rounded-lg font-semibold ${
                    orderType === 'takeout'
                      ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white'
                      : 'bg-gray-100 text-gray-700'
                  }`}
                >
                  Takeout
                </button>
              </div>

              {orderType === 'dine-in' && (
                <input
                  type="text"
                  placeholder="Table Number (e.g. A2)"
                  value={tableNumber}
                  onChange={(e) => setTableNumber(e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-100 text-gray-800 border border-gray-300 focus:border-pink-500 focus:outline-none"
                />
              )}
            </div>

            <div className="p-5 space-y-3">
              {cart.length === 0 ? (
                <p className="text-gray-500 text-center py-8">Your cart is empty</p>
              ) : (
                cart.map(item => (
                  <div key={item.id} className="bg-gray-50 rounded-lg p-4 flex justify-between items-center">
                    <div className="flex-1">
                      <h4 className="font-bold text-gray-800">{item.name}</h4>
                      <p className="text-gray-600 text-sm">{item.option_label}</p>
                      <p className="text-green-600 font-semibold">‚Ç±{item.price.toFixed(2)}</p>
                    </div>
                    <div className="flex items-center gap-3">
                      <button
                        onClick={() => updateQuantity(item.id, -1)}
                        className="bg-gray-300 text-gray-700 w-8 h-8 rounded-full flex items-center justify-center hover:bg-gray-400"
                      >
                        <Minus className="w-4 h-4" />
                      </button>
                      <span className="text-gray-800 font-bold w-8 text-center">{item.quantity}</span>
                      <button
                        onClick={() => updateQuantity(item.id, 1)}
                        className="bg-gray-300 text-gray-700 w-8 h-8 rounded-full flex items-center justify-center hover:bg-gray-400"
                      >
                        <Plus className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => removeFromCart(item.id)}
                        className="text-red-500 ml-2 hover:text-red-700"
                      >
                        <X className="w-5 h-5" />
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>

            {cart.length > 0 && (
              <div className="sticky bottom-0 bg-gray-50 p-5 border-t border-gray-200">
                <div className="flex justify-between items-center mb-4">
                  <span className="text-xl font-bold text-gray-800">Total:</span>
                  <span className="text-2xl font-bold text-green-600">‚Ç±{getCartTotal().toFixed(2)}</span>
                </div>
                <button
                  onClick={() => {
                      if (orderType === 'dine-in' && !tableNumber) {
                          alert('Please enter your table number for dine-in order');
                          return;
                      }
                      setShowCart(false);
                      setShowCheckoutModal(true); // <-- This line connects the Place Order button to the Checkout Modal
                  }}
                  className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white py-4 rounded-xl font-bold text-lg hover:shadow-xl transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={cart.length === 0}
                >
                  Place Order
                </button>
              </div>
            )}
          </div>
        </div>
      )}
      
      {/* Checkout Modal */}
      {showCheckoutModal && (
        <CheckoutModal 
            total={getCartTotal()}
            orderType={orderType}
            tableNumber={tableNumber}
            onClose={() => setShowCheckoutModal(false)}
            onSubmitOrder={handlePlaceOrder}
        />
      )}
    </div>
  );
}
