# .github/workflows/health-monitor.yml
name: Health Check Monitor

on:
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes
  workflow_dispatch: # Manual trigger

jobs:
  health-monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Pi Server Health
      id: health-check
      run: |
        echo "Checking Pi server health..."
        
        if curl -f -s --max-time 15 https://api.thethirdvoice.ai/health > /dev/null 2>&1; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ Pi server is responding normally"
        else
          echo "status=down" >> $GITHUB_OUTPUT
          echo "‚ùå Pi server is down or unreachable"
        fi
        
        # Also check backup server
        if curl -f -s --max-time 10 https://the-third-voice-mvp.onrender.com/health > /dev/null 2>&1; then
          echo "backup-status=healthy" >> $GITHUB_OUTPUT
          echo "‚úÖ Render backup server is healthy"
        else
          echo "backup-status=down" >> $GITHUB_OUTPUT
          echo "‚ùå Render backup server is also down!"
        fi

    - name: Send Discord Notification
      if: steps.health-check.outputs.status == 'down'
      run: |
        BACKUP_STATUS="${{ steps.health-check.outputs.backup-status }}"
        
        if [ "$BACKUP_STATUS" == "healthy" ]; then
          MESSAGE="üü° **Pi Server Down - Backup Available**

**Status:** Primary server unreachable
**Backup:** Render server operational  
**Action:** Consider switching to backup manually
**Time:** $(date -u)

Pi Server: https://api.thethirdvoice.ai/health ‚ùå
Backup: https://the-third-voice-mvp.onrender.com/health ‚úÖ"
        else
          MESSAGE="üî¥ **CRITICAL: Both Servers Down**

**Status:** Both primary and backup unreachable
**Action:** Immediate attention required
**Time:** $(date -u)

Pi Server: https://api.thethirdvoice.ai/health ‚ùå  
Backup: https://the-third-voice-mvp.onrender.com/health ‚ùå"
        fi
        
        echo "Sending Discord notification..."
        curl -H "Content-Type: application/json" \
          -d "{\"content\":\"$MESSAGE\"}" \
          "${{ secrets.DISCORD_WEBHOOK }}"
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Discord notification sent successfully"
        else
          echo "‚ùå Failed to send Discord notification"
        fi

    - name: Log Successful Check
      if: steps.health-check.outputs.status == 'healthy'
      run: |
        echo "‚úÖ Health check passed - Pi server responding normally"
        echo "‚úÖ Backup server status: ${{ steps.health-check.outputs.backup-status }}"
